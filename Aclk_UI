'''
Created on Apr 7, 2015

@author: Max Ruiz
'''

''' reference
t.localtime().tm_year
t.localtime().tm_mon
t.localtime().tm_mday
t.localtime().tm_hour
t.localtime().tm_min
t.localtime().tm_sec
'''


from tkinter import *
import time as t
from threading import Thread
import threading


class Aclk_UI(Frame):
    def __init__(self, master=None):
        Frame.__init__(self, master)
        master.title('Deth (Alarm) Klok')
        self.pack()

        self.menuButtons()
        self.master.config(menu=self.menubar)
        self.currTimeFrame()
        self.setAlarmFrame()
        self.threads("dispCurrTime")


    def currTimeFrame(self):
        dctFrame = LabelFrame(self, text="Current Time")
        self.ctm = StringVar()
        ctmLbl = Label(dctFrame, textvariable=self.ctm, bg="white")
        ctmLbl.pack(fill = BOTH)
        dctFrame.pack(fill = BOTH)

    def dispCurrTime(self,):
        while self.dcTime:
            hr = t.localtime().tm_hour
            mnt = t.localtime().tm_min
            sec = t.localtime().tm_sec
            if hr == 12:
                meridiem = "pm"
            elif hr == 0:
                meridiem = "am"
            elif hr > 11:
                meridiem = "pm"
            else:
                meridiem = "am"
            hr = self.conv24to12(hr)
            t.sleep(0.49)
            self.ctm.set("{0}:{1}:{2} {3}".format(hr, mnt, sec, meridiem))

    def setAlarmFrame(self):
        saFrame = LabelFrame(self, text="Set Alarm")

        self.hrSet = 0
        self.hrSetVar = StringVar()
        self.mntSet = 0
        self.mntSetVar = StringVar()
        self.alrmTime = 0
        self.alrmTimeVar = StringVar()

        hourF = Frame(saFrame)
        minuteF = Frame(saFrame)

        actvAlrmLbl = Label(hourF, text = "Alarm set to:", bg="light blue", fg="black",
                            relief=SUNKEN)
        actvAlrmLbl.pack(fill=BOTH)
        actvAlrm = Label(minuteF, textvariable=self.alrmTimeVar, bg="light blue", fg="black",
                         relief=SUNKEN)
        actvAlrm.pack(fill=BOTH)

        enAlrm = Button(hourF, text="ENABLE", fg="black", bg="yellow", command = self.enableAlarm)
        enAlrm.pack(fill=BOTH)
        disAlrm = Button(minuteF, text="DISABLE", fg="black", bg="yellow", command=self.disableAlarm)
        disAlrm.pack(fill=BOTH)

        sHr = Label(hourF, textvariable=self.hrSetVar, bg="white")
        sHr.pack(fill=BOTH)
        sMnt = Label(minuteF, textvariable=self.mntSetVar, bg="white")
        sMnt.pack(fill=BOTH)

        incHour = PhotoImage(file="incHour.png")
        iHr = Button(hourF, image=incHour,  command = lambda:self.increment("hour"))
        iHr.image = incHour
        # text = " ^^ \n || \nHour"
        iHr.pack(fill=BOTH)
        incMinute = PhotoImage(file="incMinute.png")
        iMnt = Button(minuteF, image = incMinute, command = lambda: self.increment("minute"))
        iMnt.image = incMinute
        # text = "  ^^\n  || \nMinute"
        iMnt.pack(fill=BOTH)

        decHour = PhotoImage(file="decHour.png")
        dHr = Button(hourF, image = decHour, command = lambda: self.decrement("hour"))
        dHr.image = decHour
        #text = "Hour\n || \n vv "
        dHr.pack(side=LEFT, fill=BOTH)
        decMinute = PhotoImage(file="decMinute.png")
        dMnt = Button(minuteF, image = decMinute, command = lambda: self.decrement("minute"))
        dMnt.image = decMinute
        #text = "Minute\n  ||  \n  vv  \n"
        dMnt.pack(fill=BOTH)

        minuteF.pack(side=RIGHT)
        hourF.pack(side=LEFT)
        saFrame.pack()

        self.hrSetVar.set(2)
        self.mntSetVar.set(22)

    def changeHour(self,val):
        self.hrSet = val
        self.hrSetVar.set(val)

    def changeMinute(self, val):
        self.mntSet = val
        self.mntSetVar.set(val)

    def changeAlarmTime(self, val=None):
        if val != None:
            self.alrmTime = val
            self.alrmTimeVar.set(val)
        else:
            self.alrmTime = "{0}{1}".format(self.hrSet, self.mntSet)
            self.alrmTimeVar.set("{0}:{1}".format(self.hrSet, self.mntSet))

    def enableAlarm(self):
        self.changeAlarmTime()
        self.enAlarm = True
        self.threads("setAlarm")

    def disableAlarm(self):
        self.enAlarm = False
        self.changeAlarmTime("No Alarm Set")

    def increment(self, div):
        if div == "hour":
            if self.hrSet == 12:
                self.changeHour(0)
            self.changeHour(self.hrSet+1)
        else:
            if self.mntSet == 59:
                self.changeMinute(-1)
            self.changeMinute(self.mntSet+1)

    def decrement(self, div):
        if div == "hour":
            if self.hrSet == 1:
                self.changeHour(13)
            self.changeHour(self.hrSet-1)
        else:
            if self.mntSet == 0:
                self.changeMinute(60)
            self.changeMinute(self.mntSet-1)

    def threads(self, threadName):
        if threadName == "dispCurrTime":
            try:
                self.dcTime = True
                self.currTimeThread = Thread(target=self.dispCurrTime)
                self.currTimeThread.start()
            except:
                self.ctm.set("Cannot start time thread")
        elif threadName == "setAlarm":
            try:
                self.setAlarmThread = Thread(target=self.setAlarm)
                self.setAlarmThread.start()
            except:
                self.changeAlarmTime("Cannot set alarm thread")

    def triggerAlarm(self):
        alrmWin = Toplevel()
        alrmImg = PhotoImage(file="Alarm.png")
        alrmBtn = Button(alrmWin, image=alrmImg, command = alrmWin.destroy)
        alrmBtn.image = alrmImg
        alrmBtn.pack()

    def conv24to12(self, hr):
        if hr == 0:
            return 12
        elif hr > 12:
            return hr - 12
        else:
            return hr

    def setAlarm(self):
        while self.enAlarm:
            curTm = "{0}{1}".format(self.conv24to12(t.localtime().tm_hour), t.localtime().tm_min)
            alrmTm = "{0}".format(self.alrmTime)

            if curTm == alrmTm:
                self.triggerAlarm()
                self.enAlarm = False
            else:
                t.sleep(1)

    def menuButtons(self):
        self.menubar = Menu(self)
        filemenu = Menu(self.menubar, tearoff=0)
        filemenu.add_command(label="Exit", command=self.exitProg)
        self.menubar.add_cascade(label="File", menu=filemenu)

    def exitProg(self):
        self.dcTime = False
        self.enAlarm = False
        t.sleep(3)
        self.quit()

if __name__ == "__main__":
    root = Tk()
    app = Aclk_UI(master=root)
    app.mainloop()
